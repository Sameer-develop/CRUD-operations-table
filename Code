from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Dict

# Step 1: Create FastAPI instance
app = FastAPI(title="Person CRUD API", version="1.0")

# Step 2: Define Person model
class Person(BaseModel):
    id: int
    name: str
    age: int
    email: str

# Step 3: In-memory "database"
persons: Dict[int, Person] = {}

# --------- CRUD OPERATIONS ---------

# CREATE (Add a person)
@app.post("/person/", response_model=Person)
def add_person(person: Person):
    if person.id in persons:
        raise HTTPException(status_code=400, detail="Person already exists")
    persons[person.id] = person
    return person

# READ (Get all persons)
@app.get("/persons/")
def get_all_persons():
    return list(persons.values())

# READ (Get a single person by ID)
@app.get("/person/{person_id}", response_model=Person)
def get_person(person_id: int):
    if person_id not in persons:
        raise HTTPException(status_code=404, detail="Person not found")
    return persons[person_id]

# UPDATE (Modify details of a person)
@app.put("/person/{person_id}", response_model=Person)
def update_person(person_id: int, updated_person: Person):
    if person_id not in persons:
        raise HTTPException(status_code=404, detail="Person not found")
    persons[person_id] = updated_person
    return updated_person

# DELETE (Remove a person)
@app.delete("/person/{person_id}")
def delete_person(person_id: int):
    if person_id not in persons:
        raise HTTPException(status_code=404, detail="Person not found")
    del persons[person_id]
    return {"message": f"Person {person_id} deleted successfully"}
